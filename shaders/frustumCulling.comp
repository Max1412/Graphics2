#version 430

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct Indirect
{
    uint count;
    uint instanceCount;
    uint firstIndex;
    uint baseVertex;
    uint baseInstance;
};

layout(binding = 5, std430) buffer indirectDrawBuffer
{
    Indirect indirect[];
};

layout(std430, binding = MODELMATRICES_BINDING) buffer modelMatrixBuffer
{
    mat4 modelMatrices[];
};

layout(std430, binding = 6) buffer boundingBoxBuffer
{
    mat2x4 bbox[];
};

uniform mat4 viewProjMatrix;

void main()
{
    uint index = gl_GlobalInvocationID.x;
    if (index >= indirect.length())
        return;

    mat2x4 currentBBox = bbox[index];
    vec3 bmin = currentBBox[0].xyz;
    vec3 bmax = currentBBox[1].xyz;

    mat4 mvp = viewProjMatrix * modelMatrices[index];

    vec4 vertices[8] = 
    {
        mvp * vec4(bmin.x, bmin.y, bmin.z, 1.0f),
        mvp * vec4(bmax.x, bmin.y, bmin.z, 1.0f),
        mvp * vec4(bmin.x, bmax.y, bmin.z, 1.0f),
        mvp * vec4(bmax.x, bmax.y, bmin.z, 1.0f),
        mvp * vec4(bmin.x, bmin.y, bmax.z, 1.0f),
        mvp * vec4(bmax.x, bmin.y, bmax.z, 1.0f),
        mvp * vec4(bmin.x, bmax.y, bmax.z, 1.0f),
        mvp * vec4(bmax.x, bmax.y, bmax.z, 1.0f)
    };
      
    // clip bounding box vertices on frustum planes
    for (int direction = -1; direction < 2; direction += 2)
        for (int axis = 0; axis < 3; ++axis)
        {
            bool outside = true;

            for (int vertex = 0; vertex < 8; ++vertex)
                outside = outside && (direction * vertices[vertex][axis] > vertices[vertex].w);

            if (outside)
            {
                indirect[index].instanceCount = 0;
                return;
            }
        }

    indirect[index].instanceCount = 1;
}
