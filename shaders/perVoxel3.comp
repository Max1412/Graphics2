#version 430
#extension GL_ARB_bindless_texture : require
//#extension GL_ARB_compute_variable_group_size : require

uniform ivec3 gridDim;

layout(binding = 0, std430) buffer voxelGridBuffer
{
    layout(rgba32f) image3D voxelGrid;
};

layout(binding = 1, std430) buffer matrixBuffer
{
    mat4 playerViewMatrix;
    mat4 playerProjMatrix;
};

//layout(local_size_variable) in;
layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;


void main()
{
	uvec3 g_ID = gl_GlobalInvocationID;
	vec3 pixelPos = g_ID * 10.0f;
	vec4 worldSpacePos = inverse(playerViewMatrix) * vec4(pixelPos, 1.0f);
	//if(g_ID.x <= gridDim.x && g_ID.y <= gridDim.y && g_ID.z <= gridDim.z)
	{
		imageStore(voxelGrid, ivec3(g_ID), vec4(g_ID, 1.0f));
	}

}

