#version 430
#extension GL_ARB_bindless_texture : require
//#extension GL_ARB_compute_variable_group_size : require

uniform ivec3 gridDim;

layout(binding = 0, std430) buffer voxelGridBuffer
{
    layout(rgba32f) image3D voxelGrid;
};

//layout(local_size_variable) in;
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

vec4 accumulateScattering(in vec4 front, in vec4 back)
{
    vec3 light = front.rgb + clamp(exp(-front.a), 0.0f, 1.0f) * back.rgb;
    return vec4(light, front.a + back.a);
}

void writeOutputExponential(in ivec3 pos, in vec4 data)
{
    data.a = exp(-data.a);
    imageStore(voxelGrid, pos, data);
}

void main()
{
	ivec3 g_ID = ivec3(gl_GlobalInvocationID);

	if(g_ID.x < gridDim.x && g_ID.y < gridDim.y)
	{
        vec4 accum = imageLoad(voxelGrid, g_ID);
        // TODO not sure if we need exponential data when usign non-exp. grids & shadow maps
        writeOutputExponential(g_ID, accum);
        for (g_ID.z = 1; g_ID.z < gridDim.z; ++g_ID.z)
        {
            vec4 nextVal = imageLoad(voxelGrid, g_ID);
            accum = accumulateScattering(accum, nextVal);
            writeOutputExponential(g_ID, accum);
        }
	}
}
